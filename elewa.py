# -*- coding: utf-8 -*-
#"""ELEWAPESA.ipynb

#Automatically generated by Colab.

#Original file is located at
 #   https://colab.research.google.com/drive/1bm0qIT3CCjQs0RkuXiHA-dxiRdfLXhqf
#"""

# Commented out IPython magic to ensure Python compatibility.
import streamlit as st
import bcrypt
import os
import json
import csv
from datetime import datetime
import datetime
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import shap
import base64
import sqlite3
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.cluster import KMeans
import io
from scipy import stats
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.arima.model import ARIMA
def init_db():
    conn = sqlite3.connect("users.db")
    c = conn.cursor()

    # ‚úÖ Main users table (expanded to include all profile info)
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            username TEXT PRIMARY KEY,
            password BLOB NOT NULL,
            full_name TEXT,
            email TEXT,
            phone TEXT,
            location TEXT,
            date_of_birth TEXT,
            age INTEGER,
            profile_pic TEXT,
            is_admin INTEGER DEFAULT 0,
            is_active INTEGER DEFAULT 1
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS activity_logs (
            username TEXT,
            timestamp TEXT,
            activity TEXT
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS active_sessions (
            username TEXT PRIMARY KEY,
            login_time TEXT
        )
    ''')
    conn.commit()
    conn.close()
init_db()
def add_user(username, password, is_admin=0):
    conn = sqlite3.connect("users.db")
    c.execute("SELECT username FROM users WHERE username = ?", (username,))
    if c.fetchone():
        conn.close()
        return False
    hashed = bcrypt.hashpw(password.encode(), bcrypt.gensalt())
    c.execute("INSERT INTO users (username, password, is_admin) VALUES (?, ?, ?)",
              (username, hashed, is_admin))
    conn.commit()
    conn.close()
    return True
 # --- TEMPORARY ADMIN CREATION (run only once) ---
#try:
  #  add_user("username", "password123", is_admin=1)
   # print("Default admin account created successfully.")
#except Exception as e:
    #print(f"Admin creation skipped or failed: {e}")
## --- REMOVE OR COMMENT THIS AFTER SUCCESSFUL RUN ---
def check_login(username, password):
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("SELECT password, is_admin, is_active FROM users WHERE username = ?", (username,))
    result = c.fetchone()
    conn.close()
    if result:
        stored_pass, is_admin, is_active = result
        if not is_active:
            return False, False  # User is deactivated
        if bcrypt.checkpw(password.encode(), stored_pass):
            return True, bool(is_admin)
    return False, False
def create_admin_account():
    username = "isername"
    password = "password"
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    hashed_pass = bcrypt.hashpw(password.encode(), bcrypt.gensalt())
    try:
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE,
                password TEXT,
                is_admin INTEGER DEFAULT 0,
                is_active INTEGER DEFAULT 1
            )
        ''')
        c.execute("INSERT INTO users (username, password, is_admin) VALUES (?, ?, 1)", (username, hashed_pass))
        conn.commit()
        print("Admin account created successfully!")
    except sqlite3.IntegrityError:
        print("Admin account already exists.")
    finally:
        conn.close()
#create_admin_account()   
def signup_form():
    st.subheader("Create Account")
    username = st.text_input("Choose a Username")
    password = st.text_input("Choose a Password", type="password")
    st.markdown("If you're an admin, enter your secure admin access key below:")
    admin_key_input = st.text_input("Admin Access Key (leave blank if not admin)", type="password")
    SECRET_ADMIN_KEY = "ElewaPesa@Secure2025"  # you can change this
    if st.button("Sign Up"):
        if not username or not password:
            st.warning("Please fill in all required fields.")
            return
        is_admin = 1 if admin_key_input == SECRET_ADMIN_KEY else 0
        success = add_user(username, password, is_admin)
        if success:
            if is_admin:
                st.success(f"Admin account '{username}' created successfully.")
            else:
                st.success(f"User account '{username}' created successfully.")
        else:
            st.error("Username already exists. Please choose another.")
def log_user_activity(username, activity):
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    c.execute("INSERT INTO activity_logs (username, timestamp, activity) VALUES (?, ?, ?)", (username, timestamp, activity))
    conn.commit()
    conn.close()
def get_activity_logs():
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("SELECT username, timestamp, activity FROM activity_logs ORDER BY timestamp DESC")
    logs = c.fetchall()
    conn.close()
    return logs
def get_all_users():
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("SELECT username, is_admin, is_active FROM users")
    users = c.fetchall()
    conn.close()
    return users
def set_user_status(username, active):
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("UPDATE users SET is_active = ? WHERE username = ?", (1 if active else 0, username))
    conn.commit()
    conn.close()
# ---- PROFILE PAGE ----
def profile_page(username):
    st.title("üë§ Personal Profile")
    st.caption("Manage your personal information, profile picture, and account security.")
    user_data_file = "user_data.csv"
    profile_pic_dir = "profile_pics"
    if not os.path.exists(profile_pic_dir):
        os.makedirs(profile_pic_dir)
    if os.path.exists(user_data_file):
        user_df = pd.read_csv(user_data_file)
    else:
        user_df = pd.DataFrame(columns=[
            "Username", "Full Name", "Email", "Phone", "Gender", "Location",
            "Year", "Month", "Day", "Age", "Profile Pic", "Password"
        ])
    user_row = user_df[user_df["Username"] == username]
    if not user_row.empty:
        full_name = user_row.iloc[0].get("Full Name", "")
        email = user_row.iloc[0].get("Email", "")
        phone = user_row.iloc[0].get("Phone", "")
        gender = user_row.iloc[0].get("Gender", "")
        location = user_row.iloc[0].get("Location", "")
        year_of_birth = user_row.iloc[0].get("Year", "")
        month_of_birth = user_row.iloc[0].get("Month", "")
        day_of_birth = user_row.iloc[0].get("Day", "")
        profile_pic_path = user_row.iloc[0].get("Profile Pic", None)
        if not isinstance(profile_pic_path, str) or not profile_pic_path.strip():
            profile_pic_path = None
    else:
        full_name = email = phone = gender = location = ""
        year_of_birth = month_of_birth = day_of_birth = ""
        profile_pic_path = None
    col1, col2 = st.columns([1, 2])
    with col1:
        if profile_pic_path and os.path.exists(profile_pic_path):
            st.image(profile_pic_path, width=150, caption="Profile Picture")
        else:
            st.image("https://cdn-icons-png.flaticon.com/512/847/847969.png",
                     width=150, caption="Default Profile")
    with col2:
        st.subheader("üìù Update Personal Info")
        with st.form("update_profile_form"):
            new_name = st.text_input("Full Name", value=full_name)
            new_email = st.text_input("Email", value=email)
            new_phone = st.text_input("Phone Number", value=phone)
            new_gender = st.selectbox("Gender", ["", "Male", "Female", "Other"],
                                      index=["", "Male", "Female", "Other"].index(gender) if gender in ["Male", "Female", "Other"] else 0)
            new_location = st.text_input("Location", value=location)
            st.markdown("### üéÇ Date of Birth")
            current_year = datetime.date.today().year
            year = st.selectbox("Year", list(range(1950, current_year + 1)),
                                index=list(range(1950, current_year + 1)).index(int(year_of_birth))
                                if str(year_of_birth).isdigit() else len(range(1950, current_year + 1)) - 1)
            month = st.selectbox("Month", list(range(1, 13)),
                                 index=int(month_of_birth) - 1 if str(month_of_birth).isdigit() else 0)
            day = st.selectbox("Day", list(range(1, 32)),
                               index=int(day_of_birth) - 1 if str(day_of_birth).isdigit() else 0)
            age = current_year - int(year)
            st.write(f"**Calculated Age:** {age} years")
            new_pic = st.file_uploader("Upload Profile Picture", type=["jpg", "jpeg", "png"])
            save_btn = st.form_submit_button("üíæ Save Changes")
            if save_btn:
                if new_pic:
                    pic_path = os.path.join(profile_pic_dir, f"{username}.jpg")
                    with open(pic_path, "wb") as f:
                        f.write(new_pic.getbuffer())
                    profile_pic_path = pic_path
                if username in user_df["Username"].values:
                    user_df.loc[user_df["Username"] == username, [
                        "Full Name", "Email", "Phone", "Gender", "Location",
                        "Year", "Month", "Day", "Age", "Profile Pic"
                    ]] = [
                        new_name, new_email, new_phone, new_gender, new_location,
                        year, month, day, age, profile_pic_path
                    ]
                else:
                    new_row = pd.DataFrame([{
                        "Username": username,
                        "Full Name": new_name,
                        "Email": new_email,
                        "Phone": new_phone,
                        "Gender": new_gender,
                        "Location": new_location,
                        "Year": year,
                        "Month": month,
                        "Day": day,
                        "Age": age,
                        "Profile Pic": profile_pic_path,
                        "Password": ""
                    }])
                    user_df = pd.concat([user_df, new_row], ignore_index=True)

                user_df.to_csv(user_data_file, index=False)
                st.success("‚úÖ Profile information updated successfully!")
                try:
                    log_user_activity(username, "Updated personal information")
                except:
                    pass
    st.divider()
    with st.expander("üîí Change Password"):
        st.markdown("### Update Your Password")
        with st.form("change_password_form"):
            old_pass = st.text_input("Old Password", type="password")
            new_pass = st.text_input("New Password", type="password")
            confirm_pass = st.text_input("Confirm New Password", type="password")
            change_btn = st.form_submit_button("Update Password")
            if change_btn:
                try:
                    stored_hash = user_row.iloc[0]["Password"]
                    if isinstance(stored_hash, str):
                        stored_hash = stored_hash.encode("utf-8")
                    if bcrypt.checkpw(old_pass.encode("utf-8"), stored_hash):
                        if new_pass == confirm_pass:
                            new_hash = bcrypt.hashpw(new_pass.encode("utf-8"),
                            bcrypt.gensalt()).decode("utf-8")
                            user_df.loc[user_df["Username"] == username, "Password"] = new_hash
                            user_df.to_csv(user_data_file, index=False)
                            st.success("‚úÖ Password updated successfully!")
                            try:
                                log_user_activity(username, "Changed password")
                            except:
                                pass
                        else:
                            st.error("New passwords do not match.")
                    else:
                        st.error("Incorrect old password.")
                except Exception as e:
                    st.error(f"Error while changing password: {e}")
def delete_user(username):
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("DELETE FROM users WHERE username = ?", (username,))
    conn.commit()
    conn.close()
def change_password(username, old_password, new_password):
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("SELECT password FROM users WHERE username = ?", (username,))
    result = c.fetchone()
    if result and bcrypt.checkpw(old_password.encode(), result[0]):
        new_hashed = bcrypt.hashpw(new_password.encode(), bcrypt.gensalt())
        c.execute("UPDATE users SET password = ? WHERE username = ?", (new_hashed, username))
        conn.commit()
        conn.close()
        log_user_activity(username, "Changed password successfully.")
        return True
    conn.close()
    return False

def reset_password(username, new_password):
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE username = ?", (username,))
    result = c.fetchone()
    if result:
        new_hashed = bcrypt.hashpw(new_password.encode(), bcrypt.gensalt())
        c.execute("UPDATE users SET password = ? WHERE username = ?", (new_hashed, username))
        conn.commit()
        conn.close()
        log_user_activity(username, "Password reset using Forgot Password feature.")
        return True
    conn.close()
    return False
def log_activity(username, activity):
    pass
def log_session(username, session_type):
    pass
def get_dashboard_content(username):
    return {}
def update_dashboard_content(username, content):
    pass
def get_user_content(username):
    conn = sqlite3.connect("user_content.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS user_content
                 (username TEXT PRIMARY KEY, content TEXT)''')
    conn.commit()
    c.execute("SELECT content FROM user_content WHERE username = ?", (username,))
    result = c.fetchone()
    conn.close()
    if result:
        return json.loads(result[0])
    return {}
def update_user_content(username, content):
    conn = sqlite3.connect("user_content.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS user_content
                 (username TEXT PRIMARY KEY, content TEXT)''')
    conn.commit()
    c.execute("INSERT OR REPLACE INTO user_content (username, content) VALUES (?, ?)", (username, json.dumps(content)))
    conn.commit()
    conn.close()
def get_visible_pages():
    conn = sqlite3.connect("app_settings.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS page_visibility
                 (page_name TEXT PRIMARY KEY, is_visible INTEGER)''')
    conn.commit()
    default_pages = ["Home", "About", "SACCO Interface", "Budgeting", "Profile", "Literature", "M-Pesa Monitor"]
    for page in default_pages:
        c.execute("INSERT OR IGNORE INTO page_visibility (page_name, is_visible) VALUES (?, ?)", (page, 1))
    conn.commit()
    c.execute("SELECT page_name, is_visible FROM page_visibility")
    visibility_data = c.fetchall()
    conn.close()
    return {page: bool(visible) for page, visible in visibility_data}
def set_page_visibility(page_name, is_visible):
    conn = sqlite3.connect("app_settings.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS page_visibility
                 (page_name TEXT PRIMARY KEY, is_visible INTEGER)''')
    conn.commit()
    c.execute("INSERT OR REPLACE INTO page_visibility (page_name, is_visible) VALUES (?, ?)", (page_name, 1 if is_visible else 0))
    conn.commit()
    conn.close()
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Open+Sans&family=Playfair+Display:ital,wght@1,700&family=Poppins:wght@500&family=Roboto&display=swap');

    html, body, .stApp {
        background: linear-gradient(to bottom right, #2e7d32, #ffffff, #4e342e);  /* green ‚Üí white ‚Üí brown */
        font-family: 'Roboto', sans-serif;
        color: #000000;  /* black text for contrast */
        font-size: 18px;
    }

    .main {
        background: rgba(255, 255, 255, 0.9);  /* light background for content area */
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    h1, h2, h3, h4, h5, h6 {
        font-family: 'Playfair Display', serif;
        color: #0d47a1 !important; /* vivid blue for headers */
        font-weight: bold;
        font-style: italic;
        font-size: 28px;
    }

    .stButton>button {
        font-family: 'Poppins', sans-serif;
        background-color: #2e7d32; /* green */
        color: #ffffff;
        font-weight: bold;
        font-size: 18px;
        border-radius: 8px;
        padding: 8px 16px;
        transition: background-color 0.3s ease;
        border: none;
    }
    .stButton>button:hover {
        background-color: #1b5e20; /* darker green on hover */
    }

    .stTextInput>div>div>input {
        font-family: 'Open Sans', sans-serif;
        background-color: #ffffff;
        color: #000000;
        border-radius: 5px;
        font-size: 16px;
        padding: 8px;
        border: 1px solid #a1887f;
    }

    .stAlert {
        background-color: #fce4ec;
        color: #4e342e;
        font-size: 16px;
        border-left: 6px solid #2e7d32;
        padding: 10px;
    }

    .stMarkdown p, .stMarkdown a {
        font-family: 'Roboto', sans-serif;
        color: #000000 !important; /* black text for all content */
        font-size: 18px;
    }

    .stSidebar {
        background-color: #4e342e !important; /* brown */
        color: #ffffff;
    }

    .stSidebar .css-1d391kg {
        color: #ffffff !important;
    }
    </style>
""", unsafe_allow_html=True)
# ---- SESSION STATE INITIALIZATION ----
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
if "username" not in st.session_state:
    st.session_state.username = ""
if "is_admin" not in st.session_state:
    st.session_state.is_admin = False
if "nav_selection" not in st.session_state:
    st.session_state.nav_selection = "Login"

page_visibility = get_visible_pages()

# ---- LOGGED IN STATE ----
if st.session_state.logged_in:
    menu = []

    if page_visibility.get("Menu", True):
        menu.append("menu")
    if page_visibility.get("About", True):
        menu.append("About")
    if page_visibility.get("SACCO Interface", True):
        menu.append("SACCO Interface")
    if page_visibility.get("Budgeting", True):
        menu.append("Budgeting")
    if page_visibility.get("Literature", True):
        menu.append("Literature")
    if page_visibility.get("Mobile money Monitor", True):
        menu.append("Mobile money Monitor")
    
    # Admin-only view
    if st.session_state.is_admin:
        menu.append("Admin Dashboard")

    # User account options
    menu.append("Profile")
    menu.append("Logout")

# ---- LOGGED OUT STATE ----
else:
    menu = ["Login", "Register", "About"]

# ---- SIDEBAR NAVIGATION ----
nav_default = st.session_state.get("nav_selection", "Login")
if nav_default not in menu:
    nav_default = menu[0]

choice = st.sidebar.selectbox("Navigation", menu , index=menu.index(nav_default))
st.session_state.nav_selection = choice
if choice == "Login":
    st.title("Login to ElewaPesa")
    login_type = st.radio("Login as:", ("User", "Admin"))
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    # (Your login logic continues here...)
    if st.button("Login"):
        if login_type == "User":
            success, is_admin = check_login(username, password)
            if success:
                if is_admin and login_type == "User":
                    st.error("Invalid user login details")
                else:
                    st.session_state.logged_in = True
                    st.session_state.username = username
                    st.session_state.is_admin = is_admin
                    log_user_activity(username, "Logged in as User")
                    st.success(f"Welcome back, {username}! Redirecting to Home...")
            else:
                st.error("Invalid user login details")

        elif login_type == "Admin":
            conn = sqlite3.connect("users.db")
            c = conn.cursor()
            c.execute("SELECT password FROM users WHERE username = ? AND is_admin = 1", (username,))
            result = c.fetchone()
            conn.close()
            if result and bcrypt.checkpw(password.encode(), result[0]):
                st.session_state.logged_in = True
                st.session_state.username = username
                st.session_state.is_admin = True
                log_user_activity(username, "Logged in as Admin")
                st.success("Welcome Admin!")
                st.session_state.nav_selection = "Admin Dashboard"
                st.rerun()
            else:
                st.error("Invalid admin login details.")
    st.markdown("---")
    st.write("Forgot your password?")
    if st.button("Forgot Password?"):
        st.session_state.show_reset_form = True

    if st.session_state.get("show_reset_form", False):
        st.subheader("Reset Your Password")
        reset_username = st.text_input("Enter your username")
        new_pass = st.text_input("Enter new password", type="password")
        confirm_pass = st.text_input("Confirm new password", type="password")

        if st.button("Reset Password"):
            if not reset_username or not new_pass or not confirm_pass:
                st.warning("Please fill in all fields.")
            elif new_pass != confirm_pass:
                st.error("Passwords do not match.")
            else:
                if reset_password(reset_username, new_pass):
                    st.success("Password reset successfully. You can now log in.")
                    st.session_state.show_reset_form = False
                else:
                    st.error("Username not found.")
elif choice == "Register":
    st.title("Create Your ElewaPesa Account")
    with st.form("registration_form"):
        username = st.text_input("Choose a Username")
        password = st.text_input("Create Password", type="password")
        confirm_password = st.text_input("Confirm Password", type="password")
        submit = st.form_submit_button("Register")

        if submit:
            if not username or not password:
                st.warning("Please fill in all fields.")
            elif password != confirm_password:
                st.error("Passwords do not match.")
            else:
                conn = sqlite3.connect("users.db")
                c = conn.cursor()
                c.execute("SELECT * FROM users WHERE username = ?", (username,))
                existing_user = c.fetchone()
                if existing_user:
                    st.error("That username already exists. Try another one.")
                else:
                    hashed_pass = bcrypt.hashpw(password.encode(), bcrypt.gensalt())
                    c.execute(
                        "INSERT INTO users (username, password, is_admin) VALUES (?, ?, ?)",
                        (username, hashed_pass, 0),
                    )
                    conn.commit()
                    conn.close()
                    st.success("Registration successful! You can now log in.")
                    log_user_activity(username, "Registered as User")
                    st.session_state.logged_in = False
                    st.session_state.username = username
                    st.session_state.is_admin = False


elif choice == "Change Password":
    if not st.session_state.logged_in:
        st.warning("Please log in first.")
        st.session_state.nav_selection = "Login"
        st.stop()

    st.title("Change Your Password")
    old_password = st.text_input("Enter your current password", type="password")
    new_password = st.text_input("Enter your new password", type="password")
    confirm_password = st.text_input("Confirm new password", type="password")

    if st.button("Update Password"):
        if not old_password or not new_password or not confirm_password:
            st.warning("Please fill in all fields.")
        elif new_password != confirm_password:
            st.error("New passwords do not match.")
        else:
            if change_password(st.session_state.username, old_password, new_password):
                st.success("Your password has been changed successfully.")
            else:
                st.error("Incorrect old password. Please try again.")
elif choice == "Logout":
    if st.session_state.logged_in:
        log_session(st.session_state.username, 'logout')
        log_user_activity(st.session_state.username, "Logged out")  # Log logout
        st.session_state.logged_in = False
        st.session_state.username = ''
        st.session_state.is_admin = False
        st.success("You have been logged out.")
        st.session_state.nav_selection = "Login"
        st.rerun()
elif choice == "Admin Dashboard":
    if not st.session_state.logged_in:
        st.error("You must log in to access this page.")
        st.session_state.nav_selection = "Login"
        st.stop()
    if not st.session_state.is_admin:
        st.error("Access denied. Admins only.")
        st.session_state.nav_selection = "Login"
        st.stop()
    log_activity(st.session_state.username, 'Viewed Admin Dashboard')
    st.title("Administrator Dashboard")
    st.markdown("Welcome, Admin")
    st.markdown("###Registered Users")
    users = get_all_users()
    if users:
        user_df = pd.DataFrame(users, columns=["Username", "Is Admin", "Is Active"])
        user_df["Is Admin"] = user_df["Is Admin"].apply(lambda x: "Yes" if x else "No")
        user_df["Is Active"] = user_df["Is Active"].apply(lambda x: "Active" if x else "Deactivated")
        st.dataframe(user_df, use_container_width=True)
    else:
        st.info("No users registered yet.")
    st.markdown("###Manage User Status")
    all_users = [user[0] for user in users] if users else []
    selected_user = st.selectbox("Select user to manage status:", ["-- Select User --"] + all_users)

    if selected_user != "-- Select User --":
        c1, c2 = st.columns(2)
        with c1:
            if st.button(f"Deactivate {selected_user}"):
                set_user_status(selected_user, 0)
                st.success(f"User '{selected_user}' deactivated.")
                log_user_activity(st.session_state.username, f"Deactivated user {selected_user}")
                st.rerun()
        with c2:
            if st.button(f"Activate {selected_user}"):
                set_user_status(selected_user, 1)
                st.success(f"User '{selected_user}' activated.")
                log_user_activity(st.session_state.username, f"Activated user {selected_user}")
                st.rerun()
    st.markdown("###User Activity Logs")
    logs = get_activity_logs()
    if logs:
        log_df = pd.DataFrame(logs, columns=["Username", "Timestamp", "Activity"])
        st.dataframe(log_df, use_container_width=True)
    else:
        st.info("No user activity logs found.")
    st.markdown("###Manage Page Visibility")
    current_visibility = get_visible_pages()
    st.write("Control which pages are visible to non-admin users.")
    for page, is_visible in current_visibility.items():
        new_visibility = st.checkbox(f"Show '{page}' page", value=is_visible, key=f"visibility_{page}")
        if new_visibility != is_visible:
            set_page_visibility(page, new_visibility)
            st.info(f"Visibility of '{page}' page updated. Changes will appear on next load.")
            log_user_activity(st.session_state.username, f"Set visibility of '{page}' to {new_visibility}")
            st.rerun()
    st.markdown("### Add New Admin User")
    new_admin_user = st.text_input("New Admin Username")
    new_admin_pass = st.text_input("New Admin Password", type='password')
    if st.button("Add Admin"):
        if new_admin_user and new_admin_pass:
            if add_user(new_admin_user, new_admin_pass, is_admin=1):
                st.success(f"Admin user '{new_admin_user}' added successfully.")
                log_user_activity(st.session_state.username, f"Added new admin user: {new_admin_user}")
                st.rerun()
            else:
                st.error("Username already exists. Try another.")
        else:
            st.warning("Please fill in all fields before adding.")
    st.markdown("---")
    if st.button("Logout"):
        log_session(st.session_state.username, 'logout')
        log_user_activity(st.session_state.username, "Logged out from Admin Dashboard")
        st.session_state.logged_in = False
        st.session_state.username = ''
        st.session_state.is_admin = False
        st.session_state.nav_selection = "Login"
        st.success("You have been logged out successfully.")
        st.rerun()
elif choice == "Home":
    if page_visibility.get("Home", True) or st.session_state.is_admin:
        if st.session_state.logged_in:
            log_activity(st.session_state.username, 'Viewed Dashboard')
            st.title("ElewaPesa Dashboard")
            log_activity(st.session_state.username, 'Viewed Dashboard')
            st.markdown("Welcome to your personalized financial dashboard, where you can manage budgets, analyze SACCO data, and track M-Pesa transactions.")
            col1, col2 = st.columns(2)
            with col1:
                if page_visibility.get("SACCO Interface", True) or st.session_state.is_admin:
                    if st.button("SACCO Interface"):
                        st.session_state.nav_selection = "SACCO Interface"
                        st.rerun()
                    st.caption("Upload and analyze SACCO data using statistical and machine learning tools.")
                if page_visibility.get("Literature", True) or st.session_state.is_admin:
                    if st.button("Literature"):
                        st.session_state.nav_selection = "Literature"
                        st.rerun()
                    st.caption("Explore curated financial literacy resources and guides.")
                if page_visibility.get("About", True) or st.session_state.is_admin:
                    if st.button("About"):
                        st.session_state.nav_selection = "About"
                        st.rerun()
                    st.caption("Learn more about ElewaPesa and its mission.")
            with col2:
                if page_visibility.get("Budgeting", True) or st.session_state.is_admin:
                    if st.button("Budgeting"):
                        st.session_state.nav_selection = "Budgeting"
                        st.rerun()
                    st.caption("Use the budgeting tool to allocate income across categories.")
                if page_visibility.get("Mobile money Monitor", True) or st.session_state.is_admin:
                    if st.button("Mobile money Monitor"):
                        st.session_state.nav_selection = "Mobile money Monitor"
                        st.rerun()
                    st.caption("Monitor Mobile money transactions and gain insights into your spending.")
    else:
        st.warning("This page is currently hidden by the administrator.")
        st.session_state.nav_selection = "Login"
        st.rerun()
elif choice == "About":
    if page_visibility.get("About", True) or st.session_state.is_admin:
        if st.session_state.logged_in:
            st.title("About ElewaPesa")
            st.markdown("""
                **ElewaPesa** is a financial literacy platform designed to empower users with tools for:
                - Budgeting and financial education
                - SACCO data analysis and forecasting
                - Real-time M-Pesa monitoring and reporting
                - Secure login and personalized dashboards
            """)

            with st.expander("Vision and Mission"):
                st.markdown("""
                **Vision:** To become the leading financial consultancy and budgeting solutions provider for SACCOs and Kenyans.
                **Mission:** To empower financial growth through data-driven tools, personalized insights, and accessible financial education.
                """)
            st.markdown("### Services Offered by Elewa Pesa")
            services = {
                "Financial Consultancy for SACCOs": [
                    "Strategic financial planning & advisory",
                    "Customized budget optimization",
                    "Debt & loan portfolio evaluation",
                    "Compliance and reporting support"
                ],
                "Personal Budgeting Tools": [
                    "Income, expense & savings tracking",
                    "Smart budget templates for Kenyan households",
                    "Financial goal setting and tracking",
                    "Alerts for overspending and savings progress"
                ],
                "Data-Driven Financial Analysis": [
                    "Upload and analyze SACCO or personal data",
                    "Financial ratios, trends, and heatmaps",
                    "Forecasting using ARIMA",
                    "Clustering and behavioral insights"
                ],
                "Financial Literacy Resources": [
                    "Interactive guides & explainers",
                    "Personalized literacy assessments",
                    "Educational content for SACCO members",
                    "Budgeting workshops & community modules"
                ],
                "Real-Time MOBILE MONEY Integration": [
                    "Live transaction tracking",
                    "Automatic income/expense classification",
                    "Mobile money dashboard visualization",
                    "Integration with budget analytics"
                ],
                "Secure User Account & Data Management": [
                    "Encrypted logins and data privacy",
                    "User-specific dashboards & reports",
                    "Downloadable CSV summaries",
                    "Persistent financial history"
                ]
            }
            for section, features in services.items():
                with st.expander(section):
                    for feature in features:
                        st.markdown(f"- {feature}")
            st.markdown("#### Why Financial Literacy Matters")
            st.info("""
            Financial literacy enables individuals to make informed financial decisions, avoid debt traps, and plan for their future.
            In Kenya, SACCOs have become pivotal in improving access to financial services, and understanding their structure
            and offerings is vital for inclusive growth.
            """)
            st.markdown("Contact Us")
            st.markdown("""
            - **Email:** [support@elewapesa.com](mailto:support@elewapesa.com)
            - **Phone:** +254 712 345 678
            - **WhatsApp:** [Click to chat](https://wa.me/254712345678)
            - **Twitter:** [@ElewaPesa](https://twitter.com/ElewaPesa)
            - **Facebook:** [Elewa Pesa](https://facebook.com/ElewaPesa)
            - **Instagram:** [@elewa.pesa](https://instagram.com/elewa.pesa)
            """)
    else:
        st.warning("This page is currently hidden by the administrator.")
        st.session_state.nav_selection = "Login"
        st.rerun()

elif choice == "Profile":
    if st.session_state.get("logged_in"):
        profile_page(st.session_state["username"])
    else:
        st.warning("Please log in to access your profile.")

elif choice == "SACCO Interface":
    if page_visibility.get("SACCO Interface", True) or st.session_state.is_admin:
        if st.session_state.logged_in:
            import matplotlib.pyplot as plt
            import seaborn as sns
            import plotly.express as px
            from scipy import stats
            from statsmodels.tsa.seasonal import seasonal_decompose
            from statsmodels.tsa.arima.model import ARIMA
            from sklearn.cluster import KMeans
            from sklearn.preprocessing import StandardScaler
            import shap
            import pandas as pd
            st.title("SACCO Data Upload & Analysis")
            uploaded_file = st.file_uploader("Upload your SACCO data (CSV format)", type="csv")
            if uploaded_file is not None:
                log_user_activity(st.session_state.username, "Uploaded SACCO data")  # Log upload
                df = pd.read_csv(uploaded_file)
                if 'User_ID' in df.columns:
                    df = df.drop(columns=['User_ID'])
                st.dataframe(df.head())
                required_cols = ['Date', 'Income', 'Expenses', 'Savings']
                if not all(col in df.columns for col in required_cols):
                    st.info(f"Financial analysis requires columns: {', '.join(required_cols)}.")
                    st.stop()
                df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
                df = df.dropna(subset=['Date'])
                df = df.sort_values('Date').set_index('Date')
                st.sidebar.header("Filters")
                if 'Region' in df.columns:
                    regions = df['Region'].dropna().unique()
                    selected_regions = st.sidebar.multiselect("Select Region(s)", options=regions, default=list(regions))
                else:
                    selected_regions = []
                date_min = df.index.min()
                date_max = df.index.max()
                selected_date_range = st.sidebar.date_input("Select Date Range", value=(date_min, date_max), min_value=date_min, max_value=date_max)

                if selected_regions and 'Region' in df.columns:
                    df = df[df['Region'].isin(selected_regions)]
                df = df.loc[selected_date_range[0]:selected_date_range[1]]
                if df.empty:
                    st.warning("No data available after applying filters.")
                    st.stop()
                st.markdown("### Summary Statistics")
                st.write(df.describe())
                st.markdown("### Financial Ratios")
                df['Savings_Rate'] = df['Savings'] / df['Income'].replace(0, pd.NA)
                df['Expense_Ratio'] = df['Expenses'] / df['Income'].replace(0, pd.NA)
                st.write(df[['Savings_Rate', 'Expense_Ratio']].describe())
                df_monthly = df.resample('M').sum()
                st.markdown("### Monthly Aggregated Income, Expenses and Savings")
                fig_monthly, ax_monthly = plt.subplots(figsize=(10, 6))
                df_monthly[['Income', 'Expenses', 'Savings']].plot(ax=ax_monthly)
                ax_monthly.set_title("Monthly Aggregated Income, Expenses and Savings")
                st.pyplot(fig_monthly)
                st.markdown("### Distribution of Income")
                fig_income, ax_income = plt.subplots()
                sns.histplot(df['Income'], kde=True, ax=ax_income, bins=30)
                st.pyplot(fig_income)
                st.markdown("### Distribution of Savings")
                fig_savings, ax_savings = plt.subplots()
                sns.histplot(df['Savings'], kde=True, ax=ax_savings, bins=30)
                st.pyplot(fig_savings)
                st.markdown("### Box Plots of Income, Expenses and Savings")
                fig_box, ax_box = plt.subplots()
                sns.boxplot(data=df[['Income', 'Expenses', 'Savings']], ax=ax_box)
                st.pyplot(fig_box)
                st.markdown("### Scatter Plot: Income vs Expenses colored by Savings")
                fig_scatter, ax_scatter = plt.subplots()
                sc = ax_scatter.scatter(features['Income'], features['Expenses'], c=features['Cluster'], cmap='Set1', alpha=0.6)
                ax_scatter.set_xlabel('Income')
                ax_scatter.set_ylabel('Expenses')
                ax_scatter.set_title('KMeans Clusters of Income and Expenses')
                legend1 = ax_scatter.legend(*sc.legend_elements(), title="Clusters")
                ax_scatter.add_artist(legend1)
                st.pyplot(fig_scatter)
                st.markdown("### Savings Rate Over Time")
                fig_srate, ax_srate = plt.subplots()
                df['Savings_Rate'].plot(ax=ax_srate)
                ax_srate.set_title("Savings Rate Over Time")
                st.pyplot(fig_srate)
                if 'Region' in df.columns and selected_regions:
                    st.markdown("### Average Income by Region")
                    avg_income = df.groupby('Region')['Income'].mean().loc[selected_regions]
                    fig_reg_income = px.bar(avg_income, title="Average Income by Region")
                    st.plotly_chart(fig_reg_income)
                    st.markdown("### Average Savings by Region")
                    avg_savings = df.groupby('Region')['Savings'].mean().loc[selected_regions]
                    fig_reg_savings = px.bar(avg_savings, title="Average Savings by Region")
                    st.plotly_chart(fig_reg_savings)
                st.markdown("### Cumulative Income vs Cumulative Expenses Over Time")
                cum_df = df[['Income', 'Expenses']].cumsum()
                fig_cum, ax_cum = plt.subplots()
                cum_df.plot(ax=ax_cum)
                st.pyplot(fig_cum)
                st.markdown("### Hypothesis Test: Expenses Before vs After Budgeting Start Date")
                budget_start = st.date_input("Select budgeting start date", value=date_min)
                before = df[df.index < pd.to_datetime(budget_start)]['Expenses']
                after = df[df.index >= pd.to_datetime(budget_start)]['Expenses']
                if len(before) > 1 and len(after) > 1:
                    t_stat, p_val = stats.ttest_ind(before, after, equal_var=False)
                    st.write(f"t-statistic = {t_stat:.3f}, p-value = {p_val:.3f}")
                    if p_val < 0.05:
                        st.success("Significant difference detected in expenses after budgeting started.")
                    else:
                        st.info("No significant difference detected in expenses after budgeting started.")
                else:
                    st.info("Not enough data to perform hypothesis test.")
                st.markdown("### Income Seasonality Decomposition")
                try:
                    decomposition = seasonal_decompose(df['Income'], model='additive', period=12)
                    fig_decomp = decomposition.plot()
                    st.pyplot(fig_decomp)
                except Exception as e:
                    st.warning(f"Seasonality decomposition failed: {e}")
                st.markdown("### Income Forecast (next 6 months)")
                try:
                    model = ARIMA(df['Income'], order=(1, 1, 1))
                    model_fit = model.fit()
                    forecast = model_fit.forecast(steps=6)
                    forecast_index = pd.date_range(df.index[-1], periods=7, freq='M')[1:]
                    forecast_series = pd.Series(forecast, index=forecast_index)
                    fig_forecast, ax_forecast = plt.subplots(figsize=(10, 5))
                    df['Income'].plot(ax=ax_forecast, label='Historical Income')
                    forecast_series.plot(ax=ax_forecast, style='--', label='Forecast')
                    ax_forecast.legend()
                    st.pyplot(fig_forecast)
                    st.write(forecast_series)
                except Exception as e:
                    st.warning(f"Forecasting failed: {e}")
                st.markdown("### Clustering Analysis (KMeans)")
                try:
                    features = df[['Income', 'Expenses', 'Savings']].dropna()
                    scaler = StandardScaler()
                    scaled_features = scaler.fit_transform(features)
                    kmeans = KMeans(n_clusters=3, random_state=42)
                    clusters = kmeans.fit_predict(scaled_features)
                    features = features.assign(Cluster=clusters)
                    fig_cluster, ax_cluster = plt.subplots()
                    scatter = ax_cluster.scatter(features['Income'], features['Expenses'], c=features['Cluster'], cmap='Set1', alpha=0.6)
                    ax_cluster.set_xlabel('Income')
                    ax_cluster.set_ylabel('Expenses')
                    ax_cluster.set_title('KMeans Clusters of Income and Expenses')
                    legend1 = ax_cluster.legend(*scatter.legend_elements(), title="Clusters")
                    ax_cluster.add_artist(legend1)
                    st.pyplot(fig_cluster)
                except Exception as e:
                    st.warning(f"Clustering failed: {e}")
                st.markdown("### SHAP Explainability for Savings Prediction")
                try:
                    import sklearn.linear_model as lm
                    features_shap = df[['Income', 'Expenses']].dropna()
                    target_shap = df.loc[features_shap.index, 'Savings']
                    model_shap = lm.LinearRegression()
                    model_shap.fit(features_shap, target_shap)
                    explainer = shap.Explainer(model_shap, features_shap)
                    shap_values = explainer(features_shap)
                    st.pyplot(shap.summary_plot(shap_values, features_shap, show=False))
                except Exception as e:
                    st.warning(f"SHAP analysis failed: {e}")
                csv = df.reset_index().to_csv(index=False).encode()
                st.download_button(label="Download Processed SACCO Data as CSV", data=csv, file_name='processed_sacco_data.csv', mime='text/csv')
elif choice == "Budgeting":
    if st.session_state.logged_in:
        st.title("Budgeting Tool")
        income = st.number_input("Enter your total monthly income:", min_value=0)

        if income > 0:
            st.markdown("Break down your spending below:")
            rent = st.slider("Rent/Housing", 0, income, int(income*0.3))
            food = st.slider("Food", 0, income, int(income*0.2))
            transport = st.slider("Transport", 0, income, int(income*0.1))
            other = st.slider("Other Expenses", 0, income, int(income*0.1))
            total_expense = rent + food + transport + other
            remaining = income - total_expense
            st.success(f"Remaining Balance: KES {remaining}")
            fig = px.pie(names=["Rent", "Food", "Transport", "Other", "Remaining"], values=[rent, food, transport, other, remaining], title="Budget Distribution")
            st.plotly_chart(fig)
        else:
            st.info("Please enter your monthly income to access the budgeting tools.")
elif choice == "Literature":
    if st.session_state.logged_in:
        st.title(" Financial Literacy Resources")

        # --- Main Hero Image (Banks, Consumers, Economy) ---
        st.markdown(
            """
            <a href="https://www.worldbank.org/en/topic/financialsector" target="_blank">
                <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQm_Ry_eckn4D1LV-Z0BiZO9jtEwIdonQgu9A&s"
                     style="width:100%; border-radius:15px; margin-bottom:15px;" 
                     alt="Connecting banks, consumers, and the economy through financial literacy.">
            </a>
            """,
            unsafe_allow_html=True
        )
        st.markdown("### Explore Featured Learning Materials")
        col1, col2 = st.columns(2)
        with col1:
            # Personal Budgeting
            st.markdown(
                """
                <a href="https://www.investopedia.com/terms/b/budget.asp" target="_blank">
                    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTd-0dqO4riUBHT1-EWTZrK848vOCjL40ZJiA&s"
                         style="width:100%; border-radius:12px; margin-bottom:8px;">
                </a>
                """,
                unsafe_allow_html=True
            )
            st.markdown("**[Budgeting 101 ‚Äì Investopedia](https://www.investopedia.com/terms/b/budget.asp)**")

            # SACCOs in Kenya (customized to include flag imagery)
            st.markdown(
                """
                <a href="https://www.profinch.com/sacco/" target="_blank">
                    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRG5NSFeiYpN3SFt3s3fQ7O9qSSLeHrHzh4Mg&s"
                         style="width:100%; border-radius:12px; margin-bottom:8px;"
                         alt="Understanding SACCOs in Kenya with national perspective.">
                </a>
                """,
                unsafe_allow_html=True
            )
            st.markdown("**[Understanding SACCOs in Kenya](https://www.profinch.com/sacco/)**")

            # Financial Education for African Youth ‚Äì Aflatoun
            st.markdown(
                """
                <a href="https://www.aflatoun.org/" target="_blank">
                    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSZRMTcNDMHgIzmcyXO6NbnfLgVlh2V9qykIA&s"
                         style="width:100%; border-radius:12px; margin-bottom:8px;">
                </a>
                """,
                unsafe_allow_html=True
            )
            st.markdown("**[Financial Education for African Youth ‚Äì Aflatoun](https://www.aflatoun.org/)**")
        with col2:
            # Saving & Investing ‚Äì CMA Kenya
            st.markdown(
                """
                <a href="https://www.cma.or.ke/" target="_blank">
                    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQQ99t1VSKyZHWDA58ImwiurKtK-O8O4JAbLA&s"
                         style="width:100%; border-radius:12px; margin-bottom:8px;">
                </a>
                """,
                unsafe_allow_html=True
            )
            st.markdown("**[Saving and Investing Tips ‚Äì CMA Kenya](https://www.cma.or.ke/)**")

            # Money Academy
            st.markdown(
                """
                <a href="https://www.fitmoney.org/" target="_blank">
                    <img src="https://nitpinc.com/wp-content/uploads/2024/02/Depositphotos_515986870_S.jpg"
                         style="width:100%; border-radius:12px; margin-bottom:8px;">
                </a>
                """,
                unsafe_allow_html=True
            )
            st.markdown("**[Money Academy ‚Äì Financial Literacy Curriculum](https://www.fitmoney.org/)**")

        st.divider()
        st.markdown("### Why Financial Literacy Matters")
        st.info("""
        Financial literacy empowers individuals to manage money wisely, avoid debt traps, and plan for a secure future.  
        In Kenya, SACCOs, digital banking, and financial education programs are transforming how young people engage with money.
        """)
        st.success("Keep exploring ‚Äî every resource brings you closer to financial confidence!")
elif choice == "Mobile money Monitor":
    if st.session_state.logged_in:
        st.title("Real-time Mobile money Monitoring")
        st.markdown("Integration in progress... Live API connectivity will display here once credentials are set.")
st.set_page_config(page_title="ElewaPesa Dashboard", layout="wide")
st.title("ElewaPesa ‚Äì Smart Financial Literacy Dashboard")
st.write("Welcome to the ElewaPesa dashboard! Analyze youth financial behaviors and trends.")
# --- GLOBAL FOOTER ---
st.markdown("""
---
**Contact Us**  
üìû +254 110 457 706      üìß [isaackmutembei335@gmail.com](mailto:isaackmutembei335@gmail.com)      üí¨ WhatsApp: [Chat Now](https://wa.me/254110457706)
""")



